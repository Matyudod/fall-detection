2024/08/20 19:59:14 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.6 (tags/v3.9.6:db3ff76, Jun 28 2021, 15:26:21) [MSC v.1929 64 bit (AMD64)]
    CUDA available: False
    MUSA available: False
    numpy_random_seed: 1967118972
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.39.33521 for x64
    GCC: n/a
    PyTorch: 2.4.0+cpu
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 201703
  - MSVC 192930154
  - Intel(R) oneAPI Math Kernel Library Version 2024.2-Product Build 20240605 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /Zc:__cplusplus /bigobj /FS /utf-8 -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=0, USE_CUDNN=OFF, USE_CUSPARSELT=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.19.0+cpu
    OpenCV: 4.10.0
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1967118972
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/08/20 19:59:15 - mmengine - INFO - Config:
ann_file_train = 'datasets/train_label.txt'
ann_file_val = 'datasets/val_label.txt'
auto_scale_lr = dict(base_batch_size=256, enable=False)
data_root = 'datasets/train/'
data_root_val = 'datasets/val/'
dataset_type = 'VideoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=3, max_keep_ckpts=3, save_best='auto', type='CheckpointHook'),
    logger=dict(ignore_last=False, interval=20, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    runtime_info=dict(type='RuntimeInfoHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    sync_buffers=dict(type='SyncBuffersHook'),
    timer=dict(type='IterTimerHook'))
default_scope = 'mmaction'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
file_client_args = dict(io_backend='disk')
load_from = './checkpoints/tsn_r50_1x1x3_100e_kinetics400_rgb_20200614-e508be42.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=20)
model = dict(
    backbone=dict(
        depth=50,
        norm_eval=False,
        pretrained='https://download.pytorch.org/models/resnet50-11ad3fa6.pth',
        type='ResNet'),
    cls_head=dict(
        average_clips='prob',
        consensus=dict(dim=1, type='AvgConsensus'),
        dropout_ratio=0.4,
        in_channels=2048,
        init_std=0.01,
        num_classes=2,
        spatial_type='avg',
        type='TSNHead'),
    data_preprocessor=dict(
        format_shape='NCHW',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='ActionDataPreprocessor'),
    test_cfg=None,
    train_cfg=None,
    type='Recognizer2D')
optim_wrapper = dict(
    clip_grad=dict(max_norm=40, norm_type=2),
    optimizer=dict(
        lr=7.8125e-05, momentum=0.9, type='SGD', weight_decay=0.0001))
param_scheduler = [
    dict(
        begin=0,
        by_epoch=True,
        end=100,
        gamma=0.1,
        milestones=[
            40,
            80,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='datasets/val_label.txt',
        data_prefix=dict(video='datasets/val/'),
        pipeline=[
            dict(io_backend='disk', type='DecordInit'),
            dict(
                clip_len=1,
                frame_interval=1,
                num_clips=25,
                test_mode=True,
                type='SampleFrames'),
            dict(type='DecordDecode'),
            dict(scale=(
                -1,
                256,
            ), type='Resize'),
            dict(crop_size=224, type='TenCrop'),
            dict(input_format='NCHW', type='FormatShape'),
            dict(type='PackActionInputs'),
        ],
        test_mode=True,
        type='VideoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(type='AccMetric')
test_pipeline = [
    dict(io_backend='disk', type='DecordInit'),
    dict(
        clip_len=1,
        frame_interval=1,
        num_clips=25,
        test_mode=True,
        type='SampleFrames'),
    dict(type='DecordDecode'),
    dict(scale=(
        -1,
        256,
    ), type='Resize'),
    dict(crop_size=224, type='TenCrop'),
    dict(input_format='NCHW', type='FormatShape'),
    dict(type='PackActionInputs'),
]
train_cfg = dict(
    max_epochs=10, type='EpochBasedTrainLoop', val_begin=1, val_interval=1)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        ann_file='datasets/train_label.txt',
        data_prefix=dict(video='datasets/train/'),
        pipeline=[
            dict(io_backend='disk', type='DecordInit'),
            dict(
                clip_len=1, frame_interval=1, num_clips=3,
                type='SampleFrames'),
            dict(type='DecordDecode'),
            dict(scale=(
                -1,
                256,
            ), type='Resize'),
            dict(
                input_size=224,
                max_wh_scale_gap=1,
                random_crop=False,
                scales=(
                    1,
                    0.875,
                    0.75,
                    0.66,
                ),
                type='MultiScaleCrop'),
            dict(keep_ratio=False, scale=(
                224,
                224,
            ), type='Resize'),
            dict(flip_ratio=0.5, type='Flip'),
            dict(input_format='NCHW', type='FormatShape'),
            dict(type='PackActionInputs'),
        ],
        type='VideoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(io_backend='disk', type='DecordInit'),
    dict(clip_len=1, frame_interval=1, num_clips=3, type='SampleFrames'),
    dict(type='DecordDecode'),
    dict(scale=(
        -1,
        256,
    ), type='Resize'),
    dict(
        input_size=224,
        max_wh_scale_gap=1,
        random_crop=False,
        scales=(
            1,
            0.875,
            0.75,
            0.66,
        ),
        type='MultiScaleCrop'),
    dict(keep_ratio=False, scale=(
        224,
        224,
    ), type='Resize'),
    dict(flip_ratio=0.5, type='Flip'),
    dict(input_format='NCHW', type='FormatShape'),
    dict(type='PackActionInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=2,
    dataset=dict(
        ann_file='datasets/val_label.txt',
        data_prefix=dict(video='datasets/val/'),
        pipeline=[
            dict(io_backend='disk', type='DecordInit'),
            dict(
                clip_len=1,
                frame_interval=1,
                num_clips=3,
                test_mode=True,
                type='SampleFrames'),
            dict(type='DecordDecode'),
            dict(scale=(
                -1,
                256,
            ), type='Resize'),
            dict(crop_size=224, type='CenterCrop'),
            dict(input_format='NCHW', type='FormatShape'),
            dict(type='PackActionInputs'),
        ],
        test_mode=True,
        type='VideoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(type='AccMetric')
val_pipeline = [
    dict(io_backend='disk', type='DecordInit'),
    dict(
        clip_len=1,
        frame_interval=1,
        num_clips=3,
        test_mode=True,
        type='SampleFrames'),
    dict(type='DecordDecode'),
    dict(scale=(
        -1,
        256,
    ), type='Resize'),
    dict(crop_size=224, type='CenterCrop'),
    dict(input_format='NCHW', type='FormatShape'),
    dict(type='PackActionInputs'),
]
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='ActionVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dir'

2024/08/20 19:59:15 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/08/20 19:59:15 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/08/20 19:59:16 - mmengine - INFO - These parameters in pretrained checkpoint are not loaded: {'fc.weight', 'fc.bias'}
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.conv1.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.conv1.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv1.conv.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv1.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv1.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv2.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv2.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv3.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv3.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv3.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.downsample.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.downsample.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.downsample.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv1.conv.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv1.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv1.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv2.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv2.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv3.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv3.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv3.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv1.conv.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv1.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv1.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv2.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv2.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv3.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv3.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv3.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv1.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv1.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv2.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv2.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv3.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv3.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.downsample.conv.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.downsample.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.downsample.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv1.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv1.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv2.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv2.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv3.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv3.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv1.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv1.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv2.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv2.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv3.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv3.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv1.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv1.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv2.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv2.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv3.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv3.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.downsample.conv.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.downsample.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.downsample.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv1.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv1.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv1.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv1.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv1.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv1.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv1.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv2.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv2.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv2.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv3.conv.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv3.bn.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv3.bn.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.downsample.conv.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.downsample.bn.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.downsample.bn.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv1.conv.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv1.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv1.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv2.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv2.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv2.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv3.conv.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv3.bn.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv3.bn.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv1.conv.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv1.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv1.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv2.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv2.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv2.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv3.conv.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv3.bn.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv3.bn.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

cls_head.fc_cls.weight - torch.Size([2, 2048]): 
Initialized by user-defined `init_weights` in TSNHead  

cls_head.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in TSNHead  
2024/08/20 19:59:16 - mmengine - INFO - Load checkpoint from ./checkpoints/tsn_r50_1x1x3_100e_kinetics400_rgb_20200614-e508be42.pth
2024/08/20 19:59:16 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/08/20 19:59:16 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/08/20 19:59:16 - mmengine - INFO - Checkpoints will be saved to C:\ddtam\Works\mine\fall-detection\work_dir.
